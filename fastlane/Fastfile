
PROJECT_NAME = "Qonversion"
PROJECT_SCHEME = "Qonversion"
XCODE_PROJECT = "./#{PROJECT_NAME}.xcodeproj"

lane :tests do
  runTests("QonversionTests")
end

lane :integration_tests do
  runTests("IntegrationTests")
end

lane :patch do
  tag = get_tag
  new_version = calculate_patch_version(tag)
  new_tag = "prerelease/" + new_version
  push_tag(new_tag)
end

lane :minor do
  tag = get_tag
  new_version = calculate_minor_version(tag)
  new_tag = "prerelease/" + new_version
  push_tag(new_tag)
end

lane :set_outager_url do |options|
  url = options[:url]

  path = Dir['../**/QNOutagerIntegrationTests.m'].first
  regex = /\<paste outager link here\>/

  update_file(path, regex, url)
end

lane :bump do |options|
  new_version = options[:version]

  update_plist(
    plist_path: "Framework/Info.plist",
    block: proc do |plist|
      plist[:CFBundleShortVersionString] = new_version
    end
  )

  version_bump_podspec(
    path: "Qonversion.podspec", 
    version_number: new_version
  )

  file_path = Dir['../**/QONConfiguration.m'].first
  update_file(file_path, /NSString \*const kSDKVersion = @".*";/, "NSString *const kSDKVersion = @\"#{new_version}\";")
end

def get_tag
  tag = last_git_tag()
  result_tag = tag.scan(%r{\d{1,2}.\d{1,2}.\d{1,3}}).first
  return result_tag
end

def calculate_minor_version(tag)
  major, minor, patch = parse_versions(tag)
  new_minor_version = minor.to_i.next.to_s
  new_version = major + "." + new_minor_version + "." + "0"
  return new_version
end

def calculate_patch_version(tag)
  major, minor, patch = parse_versions(tag)
  new_patch_version = patch.to_i.next.to_s
  new_version = major + "." + minor + "." + new_patch_version

  return new_version
end

def push_tag(tag)
  system("git checkout develop")
  system("git pull origin develop")
  add_git_tag(tag: tag)
  push_git_tags(tag: tag)
end

def parse_versions(tag)
  split_version_array = tag.split(".", 3)

  if split_version_array.length == 3
    major = split_version_array[0]
    minor = split_version_array[1]
    patch = split_version_array[2]
      
    return major, minor, patch
  end
end

def update_file(path, regex, result_value)
  file = File.read(path)
  new_content = file.gsub(regex, result_value)
  File.open(path, 'w') { |line| line.puts new_content }
end

def runTests(suite)
  cocoapods(
    repo_update: false,
    podfile: "./Podfile"
  )

  run_tests(
    scheme: PROJECT_SCHEME,
    only_testing: suite
  )
end
